#! /usr/bin/env python3
# -*- mode: Python; -*-


"""
vrt-rm-duplstruct

Output the VRT input with structures (elements) with equal content
removed.
"""


import hashlib
import re
import sys

from enum import Enum
from itertools import groupby

from scriptutil import InputProcessor, contains_python_attr_refs


class DuplicateStructureRemover(InputProcessor):

    """Remove VRT structures with duplicated content."""

    VERSION = '0.3 (2018-09-19)'
    DESCRIPTION = """
    Output the input VRT with structures with duplicated content removed.
    """
    ARGSPECS = [
        ('--structure-name = STRUCT -> struct_name',
         'check structures STRUCT for duplicate content',
         dict(default='text')),
        ('--within-structure = STRUCT -> within_struct',
         'remove duplicates separately within each structure STRUCT, not'
         ' across them (default: remove duplicates within the whole input)'),
        ('--attribute-condition = COND -> attr_cond',
         'remove duplicates only within structures for which the attribute'
         ' condition COND is true. COND is a Python expression referring to'
         ' attribute names as @attrname.'),
        ('--check = TARGET -> check_target',
         'check TARGET to determine if a structure is a duplicate of another,'
         ' where TARGET is one of "attributes" (or "attrs"), "content" and'
         ' "all" (both attributes and content)',
         dict(choices=['attributes', 'attrs', 'content', 'all'],
              default='content')),
        ('--comments',
         'add an XML comment for each omitted duplicate'),
        ('--verbose',
         'write log output to stderr'),
    ]

    def __init__(self):
        super().__init__()

    def check_args(self, args):
        if args.check_target == 'attributes':
            args.check_target = 'attrs'
        # Try to stay safe with the attribute condition to be
        # evaluated by forbidding other Python attribute references
        # than "re." (for accessing regexp functions).
        if contains_python_attr_refs(args.attr_cond, ignore=['re']):
            self.error_exit(
                'Attribute condition may not contain the Python attribute'
                ' references "primary.identifier" except for "re." at the'
                ' beginning.')
        super().check_args(args)

    def implement_main(self, inf, ouf):

        class LineType(Enum):
            struct_begin = 1
            struct_end = 2
            within_begin = 3
            within_end = 4
            other = 5

        def make_begins_end(struct_name):
            if struct_name is None:
                return [], None
            else:
                return ([b'<' + struct_name.encode() + ch
                         for ch in [b' ', b'>']],
                        b'</' + struct_name.encode() + b'>\n')

        LESS_THAN = b'<'[0]
        linenum = 1
        content = None
        structs_info = {}
        struct_name = self._args.struct_name
        struct_begins, struct_end = make_begins_end(struct_name)
        within_struct = self._args.within_struct
        within_begins, within_end = make_begins_end(within_struct)
        in_struct = False
        # in_within is always True if no --within-structure was
        # specified
        in_within = (within_struct is None)
        struct_num = 0
        struct_begin_line = ''
        comments = self._args.comments
        verbose = self._args.verbose
        check_attrs = self._args.check_target in ['attrs', 'all']
        check_content = self._args.check_target in ['content', 'all']
        target_descrs = {'content': 'content',
                         'attrs': 'attributes',
                         'all': 'content and attributes'}
        target_descr = target_descrs[self._args.check_target]
        attr_cond = (None if self._args.attr_cond is None
                     else re.sub(r'@(\w+)', r'attrs.get("\1")',
                                 self._args.attr_cond))

        def is_struct_begin(line):
            return 

        def identify_line(line):
            if line[0] == LESS_THAN:
                if in_within:
                    if line == struct_end:
                        return LineType.struct_end
                    elif line == within_end:
                        return LineType.within_end
                    elif any(line.startswith(begin) for begin in struct_begins):
                        return LineType.struct_begin
                elif (any(line.startswith(begin) for begin in within_begins)
                      and check_attrcond(line)):
                    return LineType.within_begin
            return LineType.other

        def check_attrcond(line):
            if attr_cond is None:
                return True
            attrs = make_attrdict(extract_attrs(line))
            try:
                return eval(attr_cond)
            except Exception as e:
                self.error_exit('Error in attribute condition ({}):'
                                .format(self._args.attr_cond),
                                e)

        def make_attrdict(attrstr):
            return dict((name, val) for name, _, val
                        in re.findall('(\\w+?)=(["\'])(.*?)\\2', attrstr))

        def log_duplicate(text):
            if comments:
                ouf.write(b'<!-- ' + text.encode() + b' -->\n')
            if verbose:
                sys.stderr.write(self.argparser.prog + ': ' + text + '\n')

        def extract_attrs(struct_line):
            # print(struct_line)
            attr_end = struct_line.find(b'>')
            attr_begin = (struct_line.find(b' ') + 1) or attr_end
            return struct_line[attr_begin:attr_end].decode()

        def check_if_duplicate(lines):

            def calc_key(lines, attrs):
                # NOTE: Attributes are considered equal only if they
                # occur in the same order. Should that be made more
                # flexible?
                hash = hashlib.md5(lines).digest() if check_content else None
                return (attrs if check_attrs else None, hash)

            nonlocal linenum, target_descr
            linecount = len(lines)
            lines = b''.join(lines)
            this_attrs = extract_attrs(struct_begin_line)
            this_begin = linenum - 1
            this_end = linenum + linecount
            key = calc_key(lines, this_attrs)
            if key in structs_info:
                other_attrs, other_begin, other_end = structs_info[key]
                log_duplicate(
                    'DUPLICATE: Omitted structure "{name}" on lines'
                    ' {this_begin}...{this_end} (attributes: {this_attrs})'
                    ' with {target_descr} equal to "{name}" on lines '
                    ' {other_begin}...{other_end} (attributes: {other_attrs}).'
                    .format(name=struct_name, **locals()))
            else:
                structs_info[key] = (
                    this_attrs,
                    this_begin,
                    this_end,
                )
                ouf.write(struct_begin_line)
                ouf.write(lines)
                ouf.write(struct_end)
            linenum += linecount

        def output_lines(lines):
            nonlocal linenum
            for line in lines:
                ouf.write(line)
                linenum += 1

        for linetype, group in groupby(inf, identify_line):
            if in_within:
                if linetype == LineType.struct_begin:
                    struct_begin_line = next(group)
                    in_struct = True
                    struct_num += 1
                    linenum += 1
                elif linetype == LineType.struct_end:
                    check_if_duplicate(content)
                    in_struct = False
                    linenum += 1
                elif linetype == LineType.within_end:
                    output_lines(group)
                    in_within = False
                    structs_info = {}
                elif in_struct:
                    content = list(group)
                else:
                    output_lines(group)
            else:
                if linetype == LineType.within_begin:
                    in_within = True
                output_lines(group)


if __name__ == '__main__':
    DuplicateStructureRemover().run()
