#! /usr/bin/env python3


"""
klk-vrt-restore-sent-order

Usage: klk-vrt-restore-sent-order < in.vrt > out.vrt

Restore the original (unscrambled) order of sentences in texts in the
input VRT originating from KLK v1, based on the value of the
"local_id" (KLK-fi) or "n" (KLK-sv) attribute of sentences.

Also move paragraph tags so that a paragraph break follows the
sentence after which a paragraph break follows in the input.
Attributes of paragraph tags are omitted.

A text is recognized as originating from KLK v1 if its attribute
"version_added" matches "KLK-(fi|sv)-2014". The content of texts added
in later versions is preserved intact.
"""


import re
import sys


def main():
    for line in sys.stdin.buffer:
        sys.stdout.buffer.write(line)
        if line.startswith(b'<text'):
            process = (b' version_added="KLK-fi-2014"' in line
                       or b' version_added="KLK-sv-2014"' in line)
            lines = []
            for line2 in sys.stdin.buffer:
                if line2 == b'</text>\n':
                    break
                lines.append(line2)
            if process:
                lines = process_lines(lines)
            for line in lines:
                sys.stdout.buffer.write(line)
            if line2:
                sys.stdout.buffer.write(line2)


def process_lines(lines):
    # sents is a list of triples [num, lines, para_after] where num is
    # the original number of the sentence from the attribute, lines a
    # list of lines in the sentence and para_after True if the
    # sentence is followed by a paragraph break; use a list instead of
    # a tuple because the value of para_after may need to be changed
    # when encountering </paragraph>
    sents = []
    for line in lines:
        if line.startswith(b'<sentence'):
            # KLK-fi has the number of the sentence within text in
            # attribute "local_id", KLK-sv in "n"
            mo = re.search(br' (?:local_id|n)="(.+?)"', line)
            local_id = int(mo.group(1))
            sents.append([local_id, [line], False])
        elif line == b'</paragraph>\n':
            sents[-1][2] = True
        elif not line.startswith(b'<paragraph'):
            sents[-1][1].append(line)
    yield from sorted_sentences(sents)


def sorted_sentences(sents):
    sents.sort(key=lambda item: item[0])
    lastsent = len(sents) - 1
    yield b'<paragraph>\n'
    for sentnum, sent in enumerate(sents):
        for line in sent[1]:
            yield line
        if sent[2]:
            # Last sentence of a paragraph
            yield b'</paragraph>\n'
            if sentnum < lastsent:
                yield b'<paragraph>\n'


if __name__ == '__main__':
    main()
