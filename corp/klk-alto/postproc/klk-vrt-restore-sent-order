#! /usr/bin/env python3


"""
klk-vrt-restore-sent-order

Usage: klk-vrt-restore-sent-order < in.vrt > out.vrt

Restore the original (unscrambled) order of sentences in texts in the
input VRT originating from KLK v1, based on the value of the
"local_id" (KLK-fi) or "n" (KLK-sv) attribute of sentences. Also
remove paragraph tags as they do not seem to correspond to the
original paragraphs in any meaningful way.

A text is recognized as originating from KLK v1 if its attribute
"version_added" matches "KLK-(fi|sv)-2014". The content of texts added
in later versions is preserved intact.
"""


import re
import sys


def main():
    for line in sys.stdin.buffer:
        sys.stdout.buffer.write(line)
        if line.startswith(b'<text'):
            process = (b' version_added="KLK-fi-2014"' in line
                       or b' version_added="KLK-sv-2014"' in line)
            lines = []
            for line2 in sys.stdin.buffer:
                if line2 == b'</text>\n':
                    break
                lines.append(line2)
            if process:
                lines = process_lines(lines)
            for line in lines:
                sys.stdout.buffer.write(line)
            if line2:
                sys.stdout.buffer.write(line2)


def process_lines(lines):
    # sents is a list of pairs (num, lines) where num is the original
    # number of the sentence from the attribute and lines a list of
    # lines in the sentence
    sents = []
    for line in lines:
        if line.startswith(b'<sentence'):
            # KLK-fi has the number of the sentence within text in
            # attribute "local_id", KLK-sv in "n"
            mo = re.search(br' (?:local_id|n)="(.+?)"', line)
            local_id = int(mo.group(1))
            sents.append((local_id, [line]))
        elif not line.startswith((b'<paragraph', b'</paragraph')):
            sents[-1][1].append(line)
    yield from sorted_sentences(sents)


def sorted_sentences(sents):
    sents.sort(key=lambda item: item[0])
    for sent in sents:
        for line in sent[1]:
            yield line


if __name__ == '__main__':
    main()
