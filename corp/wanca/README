
Scripts related to Wanca corpus (http://urn.fi/urn:nbn:fi:lb-2019052401).

# in urls: & -> &amp;
fix-bare-ampersands.pl
# remove soft hyphens
remove-soft-hyphens.pl
# wid word spaces -> ref word spaces
vrt-rename --map wid=ref
# ref word spaces -> word spaces ref
vrt-keep --names word,spaces,ref

# rename processed vrt files to match pattern
# wanca(_test)_LANGCODE(_multili).vrt

# compile the corpora
# PATH=$PATH:/proj/clarin/korp/cwb/bin:/proj/clarin/korp/scripts
./korp-make-wanca.sh



# Tokenization problems fixed:
#
# wanca_2016_nio (09-12-2019)
# wanca_2016_yrk (11-12-2019)
# wanca_2016_vro_multili (12-12-2019)
# wanca_2016_lud (12-12-2019)

# drop third field as word numbering has to be added again after tokenization is fixed

### nio:
cut -f1,2 wanca_2016_nio_korp_20190812/vrt/wanca_2016_nio/wanca_2016_nio.vrt

#### yrk:
cut -f1,2 wanca_2016_yrk_korp_20190812/vrt/wanca_2016_yrk/wanca_2016_yrk.vrt

#### vro_multili:
cut -f1,2 wanca_2016_vro_multili_korp_20190812/vrt/wanca_2016_vro_multili/wanca_2016_vro_multili.vrt

#### lud:
cut -f1,2 wanca_2016_lud_korp_20190812/vrt/wanca_2016_lud/wanca_2016_lud.vrt



### nio:
#
# fix cases (нинту ” -> нинту”):
#
# нинту   SpaceAfter=No
# ”       _
#
# or (ӈизи ” силинягәтыӈ -> ӈизи” силинягәтыӈ):
#
# ӈизи    SpaceAfter=No
# ”       SpaceAfter=No
# силинягәтыӈ     _
#
perl -pe 's/\n/¤/g;' | perl -pe 's/\tSpaceAfter=No¤(”\t)/\1/g;'

### yrk:
#
perl -pe 's/\n/¤/g;' | perl -pe 's/\tSpaceAfter=No¤(’\t)/\1/g;' | perl -pe 's/\tSpaceAfter=No¤(’\t)/\1/g;'

### lud (same as yrk):
#
# fix cases (ott ’ -> ott’)
#
# ott     SpaceAfter=No
# ’       SpaceAfter=No
# ?       SpacesAfter=\n\n
#
perl -pe 's/\n/¤/g;' | perl -pe 's/\tSpaceAfter=No¤(’\t)/\1/g;' | perl -pe 's/\tSpaceAfter=No¤(’\t)/\1/g;' | perl -pe 's/¤/\n/g;'

### vro_multili:
#
# Escape consecutive quotes:
#
./escape-consecutive-quotes.pl
#
# Manually escape 7 cases of:
# '       SpaceAfter=No   1
# Times   _       2
# New     _       3
# Roman   SpaceAfter=No   4
# '       SpaceAfter=No   5
#
# fix cases (A ' -> A')
#
# A       SpaceAfter=No
# '       _
#
perl -pe 's/\n/¤/g;' | perl -pe "s/\tSpaceAfter=No¤('\t)/\1/g;" | perl -pe "s/\tSpaceAfter=No¤('\t)/\1/g;" | perl -pe 's/¤/\n/g;'
#
# Then, remove quote escape:
perl -pe "s/^<'/'/;"



### nio:
#
# fix cases (ӈизисибся” дя -> ӈизисибся”дя):
#
# ӈизисибся”      SpaceAfter=No
# дя      _
#
# or (ӈизи” силинягәтыӈ -> ӈизи”силинягәтыӈ):
#
# ӈизи”       SpaceAfter=No
# силинягәтыӈ     _
#
# but ignore punctuation
#
perl -pe 's/¤([^\t]+”)\tSpaceAfter=No¤([^.,;:)])/¤\1\2/g;' | perl -pe 's/¤/\n/g;'

### yrk:
#
perl -pe 's/¤([^\t]+’)\tSpaceAfter=No¤([^.,;:)])/¤\1\2/g;' | perl -pe 's/¤/\n/g;'



#### nio, yrk. vro_multili, lud:
#
# add word numbering
#
./add-numbering.pl


### Problems with multiple sentences inside paragraphs because of abbreviations

perl -pe 's/\n/¤/g;' | perl -pe 's/(<paragraph id="[0-9]+">)¤<sentence (id="[0-9]+")>/\1¤<SENTENCE \2>/g; s/<\/sentence>¤<\/paragraph>/<\/SENTENCE>¤<\/paragraph>/g;' | perl -pe 's/<sentence id="[0-9]+">//g; s/<\/sentence>//g;' | perl -pe 's/¤/\n/g;' | perl -pe 's/<SENTENCE/<sentence/; s/<\/SENTENCE/<\/sentence/;' | perl -pe 's/^\n//;' | cut -f1,2 | perl -pe 's/\n/¤/;' | perl -pe 's/\tSpaceAfter=No¤(\.\t[^¤]+¤[^<])/\1/g;' | perl -pe 's/¤/\n/g;' | cut -f1,2 | ./add-sentence-and-word-numbering.pl
