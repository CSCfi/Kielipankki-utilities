#! /usr/bin/env python3
# -*- mode: Python; -*-


"""
vrt-split

Split VRT (horizontally) at text boundaries into multiple output files.
"""


import os.path
import re
import sys

import vrtargsoolib
import vrtnamelib


class Splitter(vrtargsoolib.InputProcessor):

    # FIXME (libraries): This class currently needs to be a subclass of
    # InputProcessor to work, even though the output options are not relevant.

    DESCRIPTION = """
    Split VRT input at specified structure boundaries into multiple
    output files having at most a specified number of structures or
    tokens.
    """
    ARGSPECS = [
        # ('file',
        #  'input VRT file to be split'),
        (('--output-filename-template|out-template=templ'
          ' "{dir}/{basename}-{num1:02d}{ext}" -> out_fname_templ'),
         'name output files according to template templ, which may contain'
         ' the following format keys: from input file: {dir} = directory,'
         ' {filename} = file name, {basename} = file name without extension,'
         ' {ext} = extension; from slice number: {num0} = 0-based decimal,'
         ' {num1} = 1-based decimal, {lower} = lower-case letter, {upper} ='
         ' upper-case letter'),
        ('--structure=struct "text" -> struct',
         'split the input at the boundaries of structure struct'),
        ('--keep-together-attribute=attr -> keep_attr',
         'keep together consecutive STRUCTs with the same value for attribute'
         ' attr'),
        ('--max-structs=num :int =10000',
         'output at most num structures to a single file'),
        ('--max-tokens=num :int =0',
         'output at most num tokens to a single file; 0 = unlimited'),
    ]

    class OPTIONS(vrtargsoolib.InputProcessor.OPTIONS):
        arg_inplace = False

    def __init__(self):
        super().__init__()

    def main(self, args, inf, ouf):

        LESS_THAN = '<'.encode()[0]
        fname_comps = dict(
            dir=os.path.dirname(args.infile),
            filename=os.path.basename(args.infile))
        fname_comps['basename'], fname_comps['ext'] = os.path.splitext(
            fname_comps['filename'])
        out_lines = []
        attr_comment = b''
        check_keep_attr = args.keep_attr is not None
        struct_begins = [b'<' + args.struct.encode() + trail
                         for trail in [b'>', b' ']]
        struct_end = b'</' + args.struct.encode() + b'>'
        keep_value = None
        keep_value_new = None
        keep_value_re = b' ' + (args.keep_attr or '').encode() + b'="(.*?)"'
        struct_cnt = 0
        token_cnt = 0
        prev_struct_cnt = 0
        prev_token_cnt = 0
        outfile_cnt = 0
        outf = None

        def get_keep_attr_value(line):
            mo = re.search(keep_value_re, line)
            return mo.group(1) if mo else b''

        def new_outfile():
            nonlocal outf, outfile_cnt
            if outf is not None:
                outf.close()
            outfile_cnt += 1
            outfile_name = args.out_fname_templ.format(
                num0=outfile_cnt - 1,
                num1=outfile_cnt,
                lower=chr(outfile_cnt + 96),
                upper=chr(outfile_cnt + 64),
                **fname_comps)
            outf = open(outfile_name, 'wb')
            outf.write(attr_comment)
            return outf

        def output():
            nonlocal outf, out_lines
            nonlocal struct_cnt, token_cnt, prev_struct_cnt, prev_token_cnt
            if (outf is None
                    or (args.max_structs > 0 and struct_cnt > args.max_structs)
                    or (args.max_tokens > 0 and token_cnt > args.max_tokens)):
                outf = new_outfile()
                struct_cnt -= prev_struct_cnt
                token_cnt -= prev_token_cnt
            for line in out_lines:
                outf.write(line)
            out_lines = []
            prev_struct_cnt = struct_cnt
            prev_token_cnt = token_cnt

        for line in inf:
            if not attr_comment and vrtnamelib.isbinnames(line):
                attr_comment = line
                continue
            if line[0] == LESS_THAN:
                if (line.startswith(struct_begins[0])
                        or line.startswith(struct_begins[1])):
                    if check_keep_attr:
                        keep_value_new = get_keep_attr_value(line)
                    if keep_value is None or keep_value_new != keep_value:
                        output()
                    keep_value = keep_value_new
                    struct_cnt += 1
            else:
                token_cnt += 1
            out_lines.append(line)
        if out_lines:
            output()
        outf.close()

if __name__ == '__main__':
    Splitter().run()
