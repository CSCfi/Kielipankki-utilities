
# Tests for vrt-update-attrs


# Defaults

- defaults:
    output:
      # No errors
      returncode: 0
      stderr: ''


# Base cases

- name: 'vrt-update-attrs: No data file'
  input:
    cmdline: vrt-update-attrs
    stdin: ''
  output:
    returncode: 2
    stderr: |
      vrt-update-attrs: Please specify at least one of --data-file, --fixed or --compute.
    stdout: ''


- name: 'vrt-update-attrs: Empty VRT and data file'
  input:
    cmdline: vrt-update-attrs --data-file /dev/null
    stdin: ''
  output:
    stdout: ''


- name: 'vrt-update-attrs: Empty VRT, non-empty data file'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv
    stdin: ''
    file:attrs.tsv: &tsv-1 |
      a1	a2
      aa	bb
      cc	dd
  output:
    stdout: ''


- name: 'vrt-update-attrs: Same-length VRT and data file'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv
    stdin: |
      <text a="1">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-1
  output:
    stdout: |
      <text a="1" a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="cc" a2="dd">
      <sentence>
      b
      </sentence>
      </text>


- name: 'vrt-update-attrs: Longer data file than VRT'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv
    stdin: |
      <text a="1">
      <sentence>
      a
      </sentence>
      </text>
    file:attrs.tsv: *tsv-1
  output:
    stdout: |
      <text a="1" a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>


- name: 'vrt-update-attrs: Longer VRT than data file'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv
    stdin: |
      <text a="1">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2">
      <sentence>
      b
      </sentence>
      </text>
      <text a="3">
      <sentence>
      c
      </sentence>
      </text>
    file:attrs.tsv: |
      a1	a2
      aa	bb
  output:
    returncode: 0
    stderr: |
      vrt-update-attrs: Warning: Data file attrs.tsv has fewer data lines (1) than the input VRT has text structures; adding empty attribute values for the rest of the structures
    stdout: |
      <text a="1" a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="" a2="">
      <sentence>
      b
      </sentence>
      </text>
      <text a="3" a1="" a2="">
      <sentence>
      c
      </sentence>
      </text>


- name: 'vrt-update-attrs: Input structures without attributes'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv
    stdin: |
      <text>
      <sentence>
      a
      </sentence>
      </text>
      <text>
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-1
  output:
    stdout: |
      <text a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a1="cc" a2="dd">
      <sentence>
      b
      </sentence>
      </text>


- name: 'vrt-update-attrs: Check existing attribute values (match)'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv
    stdin: |
      <text a1="aa">
      <sentence>
      a
      </sentence>
      </text>
      <text a1="cc">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-1
  output:
    stdout: |
      <text a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a1="cc" a2="dd">
      <sentence>
      b
      </sentence>
      </text>


- name: 'vrt-update-attrs: Check existing attribute values (mismatch)'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv
    stdin: |
      <text a1="ab">
      <sentence>
      a
      </sentence>
      </text>
      <text a1="cc">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-1
  output:
    stderr: |
      vrt-update-attrs: <stdin>:1: Warning: Value for attribute a1 differs from that on line 2 of attrs.tsv; keeping the existing one
    stdout: |
      <text a1="ab" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a1="cc" a2="dd">
      <sentence>
      b
      </sentence>
      </text>


- name: 'vrt-update-attrs: --structure'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --structure sentence
    stdin: |
      <text a="1">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-1
  output:
    stdout: |
      <text a="1">
      <sentence a1="aa" a2="bb">
      a
      </sentence>
      </text>
      <text a="2">
      <sentence a1="cc" a2="dd">
      b
      </sentence>
      </text>


- name: 'vrt-update-attrs: --attribute names, no column heading row'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --attributes "b,c"
    stdin: |
      <text a="1">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2">
      <sentence>
      b
      </sentence>
      </text>
      <text a="3">
      <sentence>
      c
      </sentence>
      </text>
    file:attrs.tsv: *tsv-1
  output:
    stdout: |
      <text a="1" b="a1" c="a2">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="aa" c="bb">
      <sentence>
      b
      </sentence>
      </text>
      <text a="3" b="cc" c="dd">
      <sentence>
      c
      </sentence>
      </text>
  transform: &transform-comma-space
  - name: attrlist with commas
    # Default, no actual transformation
  - name: attrlist with spaces
    input:
      cmdline:
        replace: '/,/ /'


- name: 'vrt-update-attrs: --overwrite (some)'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --overwrite a1
    stdin: |
      <text a1="ab" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a1="cc" a2="cd">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-1
  output:
    stderr: |
      vrt-update-attrs: <stdin>:6: Warning: Value for attribute a2 differs from that on line 3 of attrs.tsv; keeping the existing one
    stdout: |
      <text a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a1="cc" a2="cd">
      <sentence>
      b
      </sentence>
      </text>


- name: 'vrt-update-attrs: --overwrite (all)'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --overwrite "a1,a2"
    stdin: |
      <text a1="ab" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a1="cc" a2="cd">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-1
  output:
    stdout: |
      <text a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a1="cc" a2="dd">
      <sentence>
      b
      </sentence>
      </text>
  transform: *transform-comma-space


- name: 'vrt-update-attrs: Convert to entities'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv
    stdin: |
      <text a="1">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: |
      a1	a2
      <>	ab&"cd
      &quot;&lt;	ab&gt;cd&amp;ef&amp
  output:
    stdout: |
      <text a="1" a1="&lt;&gt;" a2="ab&amp;&quot;cd">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="&quot;&lt;" a2="ab&gt;cd&amp;ef&amp;amp">
      <sentence>
      b
      </sentence>
      </text>


- name: 'vrt-update-attrs: Key attribute, header row'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --key a
    stdin: |
      <text a="1">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: &tsv-2 |
      a	a1	a2
      2	cc	dd
      1	aa	bb
  output:
    stdout: |
      <text a="1" a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="cc" a2="dd">
      <sentence>
      b
      </sentence>
      </text>


- name: 'vrt-update-attrs: Two key attributes, header row'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --key "a,a1"
    stdin: |
      <text a="1" a1="aa">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="cc">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-2
  output:
    stdout: |
      <text a="1" a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="cc" a2="dd">
      <sentence>
      b
      </sentence>
      </text>
  transform: *transform-comma-space


- name: 'vrt-update-attrs: Two key attributes, no header row'
  input:
    cmdline: >
      vrt-update-attrs --data-file attrs.tsv --key "a,a1"
      --attributes "a a1 a2"
    stdin: |
      <text a="1" a1="aa">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="cc">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: |
      2	cc	dd
      1	aa	bb
  output:
    stdout: |
      <text a="1" a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="cc" a2="dd">
      <sentence>
      b
      </sentence>
      </text>
  transform: *transform-comma-space


- name: 'vrt-update-attrs: Non-existent key attribute'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --key "a,b"
    stdin: |
      <text a="1">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-2
  output:
    returncode: 1
    stderr: |
      vrt-update-attrs: Key attribute b does not exist in attrs.tsv
    stdout: ''
  transform: *transform-comma-space


- name: 'vrt-update-attrs: Two non-existent key attributes'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --key "a,b,c"
    stdin: |
      <text a="1">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-2
  output:
    returncode: 1
    stderr: |
      vrt-update-attrs: Key attributes b, c do not exist in attrs.tsv
    stdout: ''
  transform: *transform-comma-space


- name: 'vrt-update-attrs: Duplicate value for key attribute'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --key a
    stdin: |
      <text a="1">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: |
      a	a1	a2
      2	cc	dd
      1	aa	bb
      2	ee	ff
  output:
    stderr: |
      vrt-update-attrs: attrs.tsv:4: Warning: Duplicate value for key ('2',) overrides previous value on line 2
    stdout: |
      <text a="1" a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="ee" a2="ff">
      <sentence>
      b
      </sentence>
      </text>


- name: 'vrt-update-attrs: No value for key attribute'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --key a
    stdin: |
      <text a="1">
      <sentence>
      a
      </sentence>
      </text>
      <text a="3">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-2
  output:
    stderr: |
      vrt-update-attrs: <stdin>:6: Warning: No data for key ('3',) in attrs.tsv; using empty values for new attributes
    stdout: |
      <text a="1" a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a="3" a1="" a2="">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: No value for key attribute; preserving existing values'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --key a --overwrite a1
    stdin: |
      <text a="1" a1="a1">
      <sentence>
      a
      </sentence>
      </text>
      <text a="3" a1="a3">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-2
  output:
    stderr: |
      vrt-update-attrs: <stdin>:6: Warning: No data for key ('3',) in attrs.tsv; using empty values for new attributes
    stdout: |
      <text a="1" a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a="3" a1="a3" a2="">
      <sentence>
      b
      </sentence>
      </text>


- name: 'vrt-update-attrs: No single key attribute in structure'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --key a
    stdin: |
      <text a="1">
      <sentence>
      a
      </sentence>
      </text>
      <text>
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-2
  output:
    stderr: |
      vrt-update-attrs: <stdin>:6: Warning: No key attribute a
    stdout: |
      <text a="1" a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text>
      <sentence>
      b
      </sentence>
      </text>


- name: 'vrt-update-attrs: No multiple key attribute in structure'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --key "a,a1"
    stdin: |
      <text a="1" a1="aa">
      <sentence>
      a
      </sentence>
      </text>
      <text>
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-2
  output:
    stderr: |
      vrt-update-attrs: <stdin>:6: Warning: No key attributes a, a1
    stdout: |
      <text a="1" a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text>
      <sentence>
      b
      </sentence>
      </text>
  transform: *transform-comma-space


- name: 'vrt-update-attrs: Key attribute; check existing attribute (match)'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --key a
    stdin: |
      <text a="1" a1="aa">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="cc">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-2
  output:
    stdout: |
      <text a="1" a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="cc" a2="dd">
      <sentence>
      b
      </sentence>
      </text>


- name: 'vrt-update-attrs: Key attribute; check existing attribute (mismatch)'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --key a
    stdin: |
      <text a="1" a1="aa">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="aa">
      <sentence>
      b
      </sentence>
      </text>
    file:attrs.tsv: *tsv-2
  output:
    stderr: |
      vrt-update-attrs: <stdin>:6: Warning: Value for attribute a1 differs from that on line 2 of attrs.tsv; keeping the existing one
    stdout: |
      <text a="1" a1="aa" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="aa" a2="dd">
      <sentence>
      b
      </sentence>
      </text>


# --fixed

- name: 'vrt-update-attrs: --fixed only'
  input:
    cmdline:
    # attr=value
    - vrt-update-attrs --fixed "b=c"
    # attr:value
    - vrt-update-attrs --fixed "b:c"
    # attr=value, spaces around attr
    - vrt-update-attrs --fixed " b =c"
    # attr:value, spaces around attr
    - vrt-update-attrs --fixed " b :c"
    stdin: &input-a |
      <text a="1">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2">
      <sentence>
      b
      </sentence>
      </text>
  output:
    stdout: &output-a |
      <text a="1" b="c">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="c">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --fixed only, leading and trailing spaces'
  input:
    cmdline: vrt-update-attrs --fixed "b= c "
    stdin: *input-a
  output:
    stdout: |
      <text a="1" b=" c ">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b=" c ">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: Same --fixed attribute twice with same value'
  input:
    cmdline: vrt-update-attrs --fixed "b=c" --fixed "b:c"
    stdin: *input-a
  output:
    returncode: 2
    stdout: ''
    stderr: |
      vrt-update-attrs: Multiple --fixed values for attributes: b

- name: 'vrt-update-attrs: Same --fixed attribute twice with different values'
  input:
    cmdline: vrt-update-attrs --fixed "b=c" --fixed "b:c" --fixed "c=d" --fixed "c=e"
    stdin: *input-a
  output:
    returncode: 2
    stdout: ''
    stderr: |
      vrt-update-attrs: Multiple --fixed values for attributes: b, c

- name: 'vrt-update-attrs: Two --fixed attributes'
  input:
    cmdline: vrt-update-attrs --fixed "b=c" --fixed "c:d e"
    stdin: *input-a
  output:
    stdout: |
      <text a="1" b="c" c="d e">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="c" c="d e">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --fixed with same attribute as in input'
  input:
    cmdline: vrt-update-attrs --fixed "a=b" --fixed "c:d e"
    stdin: *input-a
  output:
    stdout: |
      <text a="1" c="d e">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" c="d e">
      <sentence>
      b
      </sentence>
      </text>
    stderr: |
      vrt-update-attrs: <stdin>:1: Warning: Value for attribute a differs from that specified with --fixed; keeping the existing one
      vrt-update-attrs: <stdin>:6: Warning: Value for attribute a differs from that specified with --fixed; keeping the existing one

- name: 'vrt-update-attrs: --fixed with same attribute as in input, --overwrite'
  input:
    cmdline: vrt-update-attrs --fixed "a=b" --fixed "c:d e" --overwrite "a"
    stdin: *input-a
  output:
    stdout: |
      <text a="b" c="d e">
      <sentence>
      a
      </sentence>
      </text>
      <text a="b" c="d e">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --fixed and --data-file with heading row, disjoint attributes'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --fixed "b=c" --fixed "c:d e"
    stdin: *input-a
    file:attrs.tsv: *tsv-2
  output:
    stdout: |
      <text a="1" a1="cc" a2="dd" b="c" c="d e">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="aa" a2="bb" b="c" c="d e">
      <sentence>
      b
      </sentence>
      </text>
    stderr: |
      vrt-update-attrs: <stdin>:1: Warning: Value for attribute a differs from that on line 2 of attrs.tsv; keeping the existing one
      vrt-update-attrs: <stdin>:6: Warning: Value for attribute a differs from that on line 3 of attrs.tsv; keeping the existing one

- name: 'vrt-update-attrs: --fixed and --data-file with --attributes, disjoint attributes'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --attributes "a,a1,a2" --fixed "b=c" --fixed "c:d e"
    stdin: *input-a
    file:attrs.tsv: *tsv-2
  output:
    stdout: |
      <text a="1" a1="a1" a2="a2" b="c" c="d e">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" a1="cc" a2="dd" b="c" c="d e">
      <sentence>
      b
      </sentence>
      </text>
    stderr: |
      vrt-update-attrs: <stdin>:1: Warning: Value for attribute a differs from that on line 1 of attrs.tsv; keeping the existing one

- name: 'vrt-update-attrs: --fixed and --data-file, common attributes with heading row'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --fixed "a1=c"
    stdin: *input-a
    file:attrs.tsv: *tsv-2
  output:
    returncode: 1
    stdout: ''
    stderr: |
      vrt-update-attrs: Same attributes specified both in a data file and with a fixed value: a1

- name: 'vrt-update-attrs: --fixed and --data-file, common attributes with --attributes'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --attributes "a,a1,a2" --fixed "a=c"
    stdin: *input-a
    file:attrs.tsv: *tsv-2
  output:
    returncode: 1
    stdout: ''
    stderr: |
      vrt-update-attrs: Same attributes specified both in a data file and with a fixed value: a


# --compute

- name: 'vrt-update-attrs: --compute with argument without : or ='
  input:
    cmdline: vrt-update-attrs --compute "b"
    stdin: *input-a
  output:
    returncode: 2
    stdout: ''
    stderr:
      contains: |
        vrt-update-attrs: error: argument --compute/--transform: no name-value separator (":", "=") in attribute-value specification: b

- name: 'vrt-update-attrs: --compute with argument with invalid attribute name'
  input:
    cmdline: vrt-update-attrs --compute "2=attr['a']"
    stdin: *input-a
  output:
    returncode: 2
    stdout: ''
    stderr:
      contains: |
        vrt-update-attrs: error: argument --compute/--transform: invalid attribute name "2" in attribute-value specification: 2=attr['a']

- name: 'vrt-update-attrs: --compute with syntax error in code'
  input:
    cmdline: vrt-update-attrs --compute "b=if"
    stdin: *input-a
  output:
    returncode: 1
    stdout: ''
    stderr: |
      vrt-update-attrs: Invalid --compute code for attribute "b": Syntax error in transformation: if
      invalid syntax (<string>, line 2):
        def transfunc(val, attr):
          if
          return val

- name: 'vrt-update-attrs: --compute producing NameError'
  input:
    cmdline: vrt-update-attrs --compute "b=return y"
    stdin: *input-a
  output:
    returncode: 1
    stdout: ''
    stderr: |
      vrt-update-attrs: Invalid --compute code for attribute "b": Invalid transformation: return y
      NameError: name 'y' is not defined:
        def transfunc(val, attr):
          return y

- name: 'vrt-update-attrs: --compute updating existing attribute with Perl-style substitution'
  input:
    cmdline:
    # attr=code
    - vrt-update-attrs --compute "b=s/([a-z])/\\1\\1/g"
    # attr:code
    - vrt-update-attrs --compute "b:s/([a-z])/\\1\\1/g"
    # attr=code, spaces around attr
    - vrt-update-attrs --compute " b =s/([a-z])/\\1\\1/g"
    # attr:code, spaces around attr
    - vrt-update-attrs --compute " b :s/([a-z])/\\1\\1/g"
    # attr=code, spaces around attr and code
    - vrt-update-attrs --compute " b = s/([a-z])/\\1\\1/g "
    stdin: &input-abc |
      <text a="1" b="abc" c="def">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghi" c="jkl">
      <sentence>
      b
      </sentence>
      </text>
  output:
    stdout: |
      <text a="1" b="aabbcc" c="def">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="gghhii" c="jkl">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --compute updating existing attribute with single expression'
  input:
    cmdline:
    - vrt-update-attrs --compute "b=f'{val}-{val}'"
    - vrt-update-attrs --compute "b = f'{val}-{val}' "
    stdin: *input-abc
  output:
    stdout: |
      <text a="1" b="abc-abc" c="def">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghi-ghi" c="jkl">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --compute updating existing attribute with function body'
  input:
    cmdline:
    - vrt-update-attrs --compute "b=vallen = len(val); val = vallen * val"
    - vrt-update-attrs --compute "b:vallen = len(val); return vallen * val"
    - vrt-update-attrs --compute "b = vallen = len(val); val = vallen * val "
    - 'vrt-update-attrs --compute "b : vallen = len(val); return vallen * val "'
    stdin: *input-abc
  output:
    stdout: |
      <text a="1" b="abcabcabc" c="def">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghighighi" c="jkl">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --compute adding new attribute based on existing ones'
  input:
    cmdline: vrt-update-attrs --compute "d=attr['b'] + ':' + attr['c']"
    stdin: *input-abc
  output:
    stdout: |
      <text a="1" b="abc" c="def" d="abc:def">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghi" c="jkl" d="ghi:jkl">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --compute adding new attribute with expression returning int'
  input:
    cmdline: vrt-update-attrs --compute "d=int(attr['a']) + len(attr['b'])"
    stdin: *input-abc
  output:
    stdout: |
      <text a="1" b="abc" c="def" d="4">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghi" c="jkl" d="5">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --compute adding new attribute with expression returning bool'
  input:
    cmdline: vrt-update-attrs --compute "d=int(attr['a']) % 2 == 0"
    stdin: *input-abc
  output:
    stdout: |
      <text a="1" b="abc" c="def" d="False">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghi" c="jkl" d="True">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --compute transforming value added with --fixed'
  input:
    cmdline: vrt-update-attrs --fixed "d=xyz" --compute "d=val + attr['b'] + ':' + attr['c']"
    stdin: *input-abc
  output:
    stdout: |
      <text a="1" b="abc" c="def" d="xyzabc:def">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghi" c="jkl" d="xyzghi:jkl">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --compute with two transformations of the same attribute'
  input:
    cmdline: vrt-update-attrs --compute "d=attr['b']" --compute "d=val + ':' + attr['c']"
    stdin: *input-abc
  output:
    stdout: |
      <text a="1" b="abc" c="def" d="abc:def">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghi" c="jkl" d="ghi:jkl">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --compute with two transformations of the same attribute, referring to another transformed attribute (order-dependent result)'
  input:
    cmdline: vrt-update-attrs --compute "d=attr['b']" --compute "c=val + val" --compute "d=val + ':' + attr['c']"
    stdin: *input-abc
  output:
    stdout: |
      <text a="1" b="abc" c="defdef" d="abc:defdef">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghi" c="jkljkl" d="ghi:jkljkl">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --compute modifying values read from file'
  input:
    cmdline: vrt-update-attrs --data-file attrs.tsv --key a --compute "a1=f'={val}='"
    stdin: *input-abc
    file:attrs.tsv: *tsv-2
  output:
    stdout: |
      <text a="1" b="abc" c="def" a1="=aa=" a2="bb">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghi" c="jkl" a1="=cc=" a2="dd">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --compute causing a warning about TypeError'
  input:
    cmdline: vrt-update-attrs --compute "d=attr['a'] + len(attr['b'])"
    stdin: *input-abc
  output:
    stdout: |
      <text a="1" b="abc" c="def" d="">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghi" c="jkl" d="">
      <sentence>
      b
      </sentence>
      </text>
    stderr: |
      vrt-update-attrs: <stdin>:1: Warning: Error when computing value for attribute "d", so using an empty value: TypeError: can only concatenate str (not "int") to str
      vrt-update-attrs: <stdin>:6: Warning: Error when computing value for attribute "d", so using an empty value: TypeError: can only concatenate str (not "int") to str

- name: 'vrt-update-attrs: --compute causing a warning about ZeroDivisionError'
  input:
    cmdline: vrt-update-attrs --compute "d=10 // (int(attr['a']) - 1)"
    stdin: *input-abc
  output:
    stdout: |
      <text a="1" b="abc" c="def" d="">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghi" c="jkl" d="10">
      <sentence>
      b
      </sentence>
      </text>
    stderr: |
      vrt-update-attrs: <stdin>:1: Warning: Error when computing value for attribute "d", so using an empty value: ZeroDivisionError: integer division or modulo by zero

- name: 'vrt-update-attrs: --compute using XML-encoding and -decoding'
  input:
    cmdline: vrt-update-attrs --compute "d=len(xml_decode(attr['b']))" --compute "e=xml_encode(xml_decode(attr['c']).replace('(', '<').replace(')', '>'))"
    stdin: |
      <text a="1" b="&lt;&gt;" c="(ab&amp;c)">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="&quot;&amp;&quot;&apos;" c="j&apos;kl">
      <sentence>
      b
      </sentence>
      </text>
  output:
    stdout: |
      <text a="1" b="&lt;&gt;" c="(ab&amp;c)" d="2" e="&lt;ab&amp;c&gt;">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="&quot;&amp;&quot;&apos;" c="j&apos;kl" d="4" e="j'kl">
      <sentence>
      b
      </sentence>
      </text>


# --setup-code

- name: 'vrt-update-attrs: --setup-code importing random and initializing random seed'
  input:
    cmdline: vrt-update-attrs --setup-code "import random" --setup-code "random.seed(0)" --compute "d = random.randint(0, 100)"
    stdin: *input-abc
  output:
    stdout: |
      <text a="1" b="abc" c="def" d="49">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghi" c="jkl" d="97">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --setup-code initializing global variable'
  input:
    cmdline: vrt-update-attrs --setup-code "x = 1" --compute "d = global x; x *= 2; return x"
    stdin: *input-abc
  output:
    stdout: |
      <text a="1" b="abc" c="def" d="2">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghi" c="jkl" d="4">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --setup-code defining a function'
  input:
    cmdline: |
      vrt-update-attrs --setup-code "def f(x): return x * x" --compute "d = f(int(attr['a']))"
    stdin: *input-abc
  output:
    stdout: |
      <text a="1" b="abc" c="def" d="1">
      <sentence>
      a
      </sentence>
      </text>
      <text a="2" b="ghi" c="jkl" d="4">
      <sentence>
      b
      </sentence>
      </text>

- name: 'vrt-update-attrs: --setup-code with --compute function causing NameError'
  input:
    cmdline: |
      vrt-update-attrs --setup-code "x = 0" --compute "d = y"
    stdin: *input-abc
  output:
    returncode: 1
    stdout: ''
    stderr: |
      vrt-update-attrs: Error when computing value for attribute "d": NameError: name 'y' is not defined
