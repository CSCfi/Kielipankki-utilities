#! /usr/bin/env python3
# -*- mode: Python; -*-

from argparse import ArgumentTypeError
from itertools import groupby
from tempfile import mkstemp
import os, re, sys

from vrtargslib import version_args
from vrtargslib import BadData, BadCode
from vrtnamelib import isbinnames

def parsearguments():
    description = '''

    Unpack a directory tree of packed vrt fragments (identified by
    their file extension, in lexicographic order of their pathnames)
    to the original names under a new directory tree of vrt documents.

    '''

    parser = version_args(description = description)

    parser.add_argument('indir', help = 'input directory')

    outgrp = parser.add_mutually_exclusive_group(required = True)
    outgrp.add_argument('--out', '-o', dest = 'outdir', metavar = 'outdir',
                        help = 'output directory')
    outgrp.add_argument('--suffix', '-s', metavar = '.fix',
                        help = 'output in sibling directory indir.fix')

    parser.add_argument('--vrf', metavar = 'ext', default = 'vrf',
                        help = '''

                        fragment extension (default: vrf), possibly
                        composed of more than one extension (for
                        example: vrf.parsed)

                        ''')

    args = parser.parse_args()
    args.prog = parser.prog
    return args

# A dirsource produces all *.vrt files found under a given directory,
# recursively, in a lexicographic order of their pathnames.

def dirsource(args, path):
    '''Yield a fragment producer for each *.vrt file under path in some
    sort of lexicographic order of their path names.

    '''

    if os.path.isdir(path):
        for name in sorted(os.listdir(path)):
            yield from dirsource(args, os.path.join(path, name))
    elif ( os.path.isfile(path) and
           hasextension(path, args.vrf) ):
        inf = open(path, mode = 'br')
        yield makesource(properlines(inf))
        inf.close()
    else:
        pass

def hasextension(path, ext):
    '''Return true if the basename ends properly with a period and the
    extension ext, which can contain periods but is not supposed to
    start with one.

    '''
    dirname, basename = os.path.split(path)
    return ( basename.endswith('.' + ext) and
             len(basename) > 1 + len(ext) )

def properlines(lines):
    for line in lines:
        if line.isspace(): continue
        yield (line if line.endswith(b'\n') else line + b'\n')

def makesource(inf):
    '''Return a source of the fragments packed in the given file.

    '''

    frak = 1
    def identify(line):
        nonlocal frak

        if line.startswith(b'</...>'):
            frak += 1
            return frak - 1

        return frak

    return (group for kind, group in groupby(inf, identify))

# A dirsink creates a directory where the documents are unpacked under
# their original pathnames relative to their original directory.

def dirsink(dirobj, sentinel):
    os.mkdir(dirobj)
    return makesink(dirobj, dirobj, dirmember, sentinel)

def dirmember(dirobj, pathname):

    subdirname = os.path.dirname(pathname)
    os.makedirs(subdirname, exist_ok = True)
    fd, temp = mkstemp(dir = subdirname,
                       prefix = os.path.basename(pathname),
                       suffix = '.tmp')
    os.close(fd)
    out = open(temp, mode = 'bw')

    def end():
        out.close()
        os.rename(temp, pathname)

    return out, end

def makesink(target, targetname, member, sentinel):
    out, end = None, None
    names = None
    def consumer(fragment):
        nonlocal out, end, names

        if fragment is sentinel:
            end is None or end()
            return

        first = next(fragment)
        while isbinnames(first):
            names = first
            first = next(fragment)

        if not first.startswith(b'<... '):
            raise BadData('not a fragment start tag')
        # print('got fragment:', first)
        attributes = dict(re.findall(br'(\w+)="([^"]*)"', first))
        # print('got attributes:', attributes)
        relative = attributes[b'source'].decode('UTF-8')
        pathname = os.path.join(targetname, relative)
        # print('got pathname:', pathname)

        if attributes[b'fragment'] == b'1':
            end is None or end()
            out, end = None, None

        if out is None:
            out, end = member(target, pathname)
            names is None or out.write(names)

        for line in fragment:
            if line.startswith(b'</...>'): continue
            if isbinnames(line):
                (names is None or not names == line) and out.write(line)
                names = line
            else:
                out.write(line)

    return consumer

def main(args):
    try:
        implement_main(args)
    except KeyboardInterrupt:
        print(args.prog + ': keyboard interrupt',
              file = sys.stderr)
        sys.exit(1)

def implement_main(args):
    indir = os.path.realpath(args.indir)
    outdir = ( os.path.realpath(args.outdir)
               if args.outdir
               else os.path.join(os.path.dirname(indir),
                                 os.path.basename(indir) + args.suffix) )

    if os.path.isdir(indir):
        source = dirsource(args, indir)
    else:
        print('{}: error: not a directory: {}'
              .format(args.prog, args.indir),
              file = sys.stderr)
        exit(1)

    sentinel = [ b'*** sentinel line ***\n' ]
    try:
        sink = dirsink(outdir, sentinel)
    except Exception as exn:
        print('{}: error: could not make output directory'
              .format(args.prog),
              '{}: {}'.format(args.prog, exn),
              sep = '\n', file = sys.stderr)
        exit(1)

    for producer in source:
        for fragment in producer:
            sink(fragment)

    sink(sentinel)

if __name__ == '__main__':
    main(parsearguments())
