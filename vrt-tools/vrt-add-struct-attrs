#! /usr/bin/env python3
# -*- mode: Python; -*-


"""
vrt-add-struct-attrs

Add structural attribute annotations to VRT from a TSV file.
"""


# TODO:
# - Support adding attribute values based on the value of a key
#   attribute instead of by order.


import re
import sys

from collections import OrderedDict

from vrtargsoolib import InputProcessor


class TsvReader:

    """Read from a binary tab-separated values file, optionally with a
    column headers.

    By default, convert the characters <>&" to the corresponding XML
    predefined entities.

    This tries to be somewhat compatible with csv.DictReader, which does
    not support reading from a binary file, which is faster.
    """

    entities = dict((spec[0].encode(), ('&' + spec[1:] + ';').encode())
                    for spec in '<lt >gt &amp "quot'.split())

    def __init__(self, infile, fieldnames=None, entities=True):
        self._infile = infile
        self.fieldnames = fieldnames
        self._entities = entities
        self.line_num = 0

    def __next__(self):

        def encode_entities(line):
            return re.sub(rb'([<>"]|&(?!(?:lt|gt|amp|quot);))',
                          lambda mo: self.entities[mo.group(1)],
                          line)

        def read_fields():
            line = self._infile.readline()
            if not line:
                raise StopIteration
            self.line_num += 1
            if self._entities:
                line = encode_entities(line)
            return line[:-1].split(b'\t')

        if self.fieldnames is None:
            self.fieldnames = read_fields()
        fieldvals = read_fields()
        return OrderedDict(zip(self.fieldnames, fieldvals))


class StructAttrAdder(InputProcessor):

    DESCRIPTION = """
    Add structural attribute annotations to VRT data from a TSV file
    with the same number of data rows as the VRT data has structural
    attributes of the specified kind.
    """

    ARGSPECS = [
        ('--structure-name=STRUCT "text" -> struct_name',
         'Add attributes (annotations) to structures STRUCT.'),
        ('--data-file=FILENAME',
         'Add annotations from the TSV data file FILENAME.',
         dict(required=True)),
        ('--attribute-names=ATTRLIST -> attr_names',
         """Add attributes (annotations) listed in space-separated ATTRLIST,
         corresponding to the columns (fields) of the TSV data file. If not
         specified, the first row of the TSV file is considered as a heading
         listing the attribute names. If an attribute named in ATTRLIST
         already exists in the VRT, check that its value is the same than in
         the TSV file, unless --overwrite-attributes lists the attribute.
         """),
        ('--overwrite-attributes=ATTRLIST -> overwrite_attrs',
         """Overwrite the possibly existing values of attributes listed in
         space-separated ATTRLIST, instead of warning if their values differ
         and keeping the existing value.
         """),
    ]

    def __init__(self):
        super().__init__()

    def main(self, args, inf, ouf):

        LESS_THAN = '<'.encode()[0]
        overwrite_attrs = set(name.encode()
                              for name in (args.overwrite_attrs or '').split())
        if args.attr_names:
            args.attr_names = [name.encode()
                               for name in args.attr_names.split()]
        struct_begin = ('<' + args.struct_name).encode()
        struct_begin_endpos = len(args.struct_name) + 1
        struct_begin_endchars = b' >'
        new_attr_names = None

        def add_attributes(line, add_attrs, tsv_line_num):
            attrs = OrderedDict(re.findall(rb'(\w+)="(.*?)"', line))
            for overlap_attr in set(attrs) & new_attr_names:
                if (overlap_attr not in overwrite_attrs
                        and add_attrs[overlap_attr] != attrs[overlap_attr]):
                    self.warn(
                        ('Values for attribute {attr} differ on'
                         ' line {dataline} of {datafile} and'
                         ' line {vrtline} of VRT input').format(
                             attr=overlap_attr.decode(),
                             dataline=tsv_line_num,
                             datafile=args.data_file,
                             vrtline=linenr))
                    # In case of conflict, the existing value is kept
                    add_attrs[overlap_attr] = attrs[overlap_attr]
            for attrname, attrval in add_attrs.items():
                # This is redundant for the attributes that are for checking
                # value equality only, but is this faster anyway?
                attrs[attrname] = attrval
            return (struct_begin + b' '
                    + b' '.join(attrname + b'="' + attrval + b'"'
                                for attrname, attrval in attrs.items())
                    + b'>\n')

        with open(args.data_file, 'rb') as attrf:
            tsv_reader = TsvReader(attrf, fieldnames=args.attr_names,
                                   entities=True)
            linenr = 0
            for line in inf:
                linenr += 1
                if (line[0] == LESS_THAN and line.startswith(struct_begin)
                        and line[struct_begin_endpos] in struct_begin_endchars):
                    add_attrs = next(tsv_reader, None)
                    if new_attr_names is None:
                        new_attr_names = set(tsv_reader.fieldnames)
                    if add_attrs is None:
                        # If the data file is too short, output the rest of the
                        # VRT as is and exit with error
                        ouf.write(line)
                        for line in inf:
                            ouf.write(line)
                        self.error_exit(
                            ('Data file {datafile} has fewer data lines'
                             ' ({numlines}) than the input VRT has {struct}'
                             ' structures').format(
                                 datafile=args.data_file,
                                 numlines=(tsv_reader.line_num -
                                           int(args.attr_names is None)),
                                 struct=args.struct_name))
                    line = add_attributes(line, add_attrs, tsv_reader.line_num)
                ouf.write(line)


if __name__ == '__main__':
    StructAttrAdder().run()
