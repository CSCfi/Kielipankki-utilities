#! /usr/bin/env python3
# -*- mode: Python; -*-

# Validates the validator (when run in the same directory)

import argparse, os, re, sys
from itertools import chain
from subprocess import Popen, PIPE

import signal
signal.signal(signal.SIGINT, signal.SIG_DFL)
signal.signal(signal.SIGPIPE, signal.SIG_DFL)

passed = 0
failed = 0
def test(*, tag = 'untagged-test',
         document, expected, command = ['./vrt-validate']):
    global passed, failed
    with Popen(command,
               stdin = PIPE,
               stdout = PIPE,
               stderr = PIPE) as proc:
        observed, error = proc.communicate(document)
        if observed == expected:
            passed += 1
        else:
            failed += 1
            print('! FAIL\t{}'.format(tag))
            print('! expected:\n', expected.decode('UTF-8'),
                  '! observed:\n', observed.decode('UTF-8'),
                  sep = '', end = '\n')

        if proc.returncode is None:
            print('error: validator did not terminate',
                  file = sys.stderr)
            exit(2)

        if proc.returncode:
            print('error: validator terminated with non-zero status',
                  file = sys.stderr)
            exit(2)

VERBOSE_HEAD = '\t'.join(('line', 'kind', 'level', 'issue'))
SUMMARY_HEAD = '\t'.join(('count', 'line', 'kind', 'level', 'issue'))

INFO_COMMAND = ['./vrt-validate', '--info']
ERROR_COMMAND = ['./vrt-validate', '--error']
VERBOSE_COMMAND = ['./vrt-validate', '--verbose']

def report(*lines, head = VERBOSE_HEAD):
    return ( ''.join(line + '\n'
                     for line
                     in chain([head], map('\t'.join, lines)))
    ).encode('UTF-8')

# The order of the messages that concern each particular input line is
# a somewhat arbitrary characteristic of ./vrt-validate (except in
# --summary). Edit the *expected order* to match the observed order
# when ./vrt-validate changes.

test(document =
     b'<foo>',

     expected =
     report(('2', 'nest', 'error', 'element not closed: foo')))

test(document =
     ( b'<foo>\r\n'
       b'</foo>' ),

     expected =
     report())

test(document =
     ( b'<foo>\r\n'
       b'</foo>' ),

     expected =
     report(('1', 'code', 'info', 'CR LF line terminator'),
            ('1', 'name', 'info', 'opened element: foo'),
            ('2', 'code', 'info', 'no line terminator')),
     command = INFO_COMMAND)

test(document =
     ( b'foo\r\n'
       b'bar\r\n' ),

     expected =
     report(('1', 'data', 'error', 'data outside any element')))

test(document =
     b'foo\r\n',

     expected =
     report(('1', 'code', 'info', 'CR LF line terminator'),
            ('1', 'data', 'error', 'data outside any element'),
            ('1', 'data', 'info', 'number of fields: 1')),
     command = INFO_COMMAND)

test(document =
     b'foo\rbar\n',

     expected =
     report(('1', 'code', 'error', 'line terminator in line'),
            ('1', 'data', 'error', 'data outside any element')),
     command = ERROR_COMMAND)

test(document =
     ( b'<foo bar="<o>">\n'
       b'</foo>' ),

     # would be nice to have also the name: bar of foo
     expected =
     report(('1', 'meta', 'error', 'bare angle bracket')))

test(document =
     ( b'<foo bar=" " baz=" x">\n'
       b'</foo>' ),

     expected =
     report(('1', 'data', 'warning', 'value is all space: bar of foo'),
            ('1', 'data', 'warning', 'outer space in value: baz of foo')))

test(document =
     ( b'<foo bar="n\t">\n'
       b'</foo>' ),

     expected =
     report(('1', 'data', 'error', 'tab in value: bar of foo')))

test(document =
     ( b'<foo bar="n\'">\n'
       b'</foo>' ),

     # A bare apostrophe in attribute value is not an error
     expected =
     report())

test(document =
     ( b'<foo baz="" bar="">\n'
       b'</foo>\n' ),

     expected =
     report(('1', 'name', 'info', 'opened element: foo'),
            ('1', 'names', 'info', 'attribute names out of order in element: foo')),
     command = INFO_COMMAND)

test(tag = 'valid element and attribute names',

     document =
     ( b'<te-s.t2- _b-a.r2-="">\n'
       b'<.te2st. .ba2r_="">\n'
       b'</.te2st.>\n'
       b'</te-s.t2->\n' ),

     expected =
     report(('1', 'names', 'warning',
             'attribute name not an identifier: _b-a.r2- of te-s.t2-'),
            ('2', 'names', 'warning',
             'attribute name not an identifier: .ba2r_ of .te2st.'),),
     command = VERBOSE_COMMAND)

test(tag = 'invalid element and attribute names',

     document =
     ( b'<Test>\n'                  # uppercase letter in element name
       b'<2test>\n'                 # initial digit in element name
       b'<-test>\n'                 # initial hyphen in element name
       b'<test$>\n'                 # $ in element name
       b'<te_st>\n'                 # underscore in element name
       b'<test Test="foo">\n'       # uppercase letter in attribute name
       b'<testb 2test="foo">\n'     # initial digit in attribute name
       b'<testc -test="foo">\n'     # initial hyphen in attribute name
       b'<testd test$="foo">\n'     # $ in attribute name
       b'</testd>\n'
       b'</testc>\n'
       b'</testb>\n'
       b'</test>\n'
       b'</te_st>\n'
       b'</test$>\n'
       b'</-test>\n'
       b'</2test>\n'
       b'</Test>\n' ),

     expected =
     report(('1', 'form', 'error', 'malformed tag'),
            ('2', 'form', 'error', 'malformed tag'),
            ('3', 'form', 'error', 'malformed tag'),
            ('4', 'form', 'error', 'malformed tag'),
            ('5', 'form', 'error', 'malformed tag'),
            ('6', 'form', 'error', 'malformed tag'),
            ('7', 'form', 'error', 'malformed tag'),
            ('8', 'form', 'error', 'malformed tag'),
            ('9', 'form', 'error', 'malformed tag'),
            ('10', 'nest', 'error', 'element not open: testd'),
            ('11', 'nest', 'error', 'element not open: testc'),
            ('12', 'nest', 'error', 'element not open: testb'),
            ('13', 'nest', 'error', 'element not open: test'),
            ('14', 'form', 'error', 'malformed tag'),
            ('15', 'form', 'error', 'malformed tag'),
            ('16', 'form', 'error', 'malformed tag'),
            ('17', 'form', 'error', 'malformed tag'),
            ('18', 'form', 'error', 'malformed tag'),),
     command = VERBOSE_COMMAND)

test(document =
     ( b'<text with="some&#xa;thing">\n'

       # incidentally, html.unescape does *not* interpret &#x85; as
       # U+0085 (NEXT LINE); it does interpret &#x2028; as U+2028
       # (LINE SEPARATOR)

       b'<sentence with="more&#x2028;of &#xa;it">\n'

       b'and &#x2028; more,\tand&#xa; more\n'

       b'</sentence>\n'
       b'</text>\n'),

     expected =
     report(('1', 'meta', 'error', 'line terminator reference'),
            ('2', 'meta', 'error', 'line terminator reference'),
            ('2', 'meta', 'error', 'line terminator reference'),
            ('3', 'data', 'error', 'line terminator reference'),
            ('3', 'data', 'error', 'line terminator reference')),
     command = VERBOSE_COMMAND)

test(document =
     ( b'<text>\n'

       # U+e000 is a "private use character"
       b'<sentence with="&#xe000;">\n'

       # html.unescape does consider &x90; a control character, unlike
       # many other codes in the Latin-1 control block
       b'&#x90;\n'

       b'&#xe000;\n'

       b'</sentence>\n'
       b'</text>\n'),

     expected =
     report(('2', 'meta', 'warning', 'private character reference'),
            ('3', 'data', 'warning', 'control character reference'),
            ('4', 'data', 'warning', 'private character reference')),
     command = VERBOSE_COMMAND)

test(document =
     ( b'<text with="&#x09;">\n'
       b'<sentence>\n'
       b'something&#9;something\n'
       b'</sentence>\n'
       b'</text>\n' ),

     expected =
     report(('1', 'meta', 'error', 'field separator reference'),
            ('3', 'data', 'error', 'field separator reference')))

test(document =

     # html.unescape produces nothing for &#xb;
     # (and leaves &nerror; as &nerror;)

     ( b'<text with="&nerror; &#xb;">\n'
       b'<sentence>\n'
       b'&nerror;\n'
       b'(&#xb;)\n'
       b'</sentence>\n'
       b'</text>\n'),

     expected =
     report(('1', 'meta', 'error', 'unknown reference'),
            ('1', 'meta', 'error', 'vanishing reference'),
            ('3', 'data', 'error', 'unknown reference'),
            ('4', 'data', 'error', 'vanishing reference')),
     command = VERBOSE_COMMAND)

test(document =
     ( b'<text with="\x07">\n'
       b'<sentence with="\xee\x80\x80">\n' # U+e000 in UTF-8
       b'\x07\n'
       b'\xee\x80\x80\n'
       b'</sentence>\n'
       b'</text>\n' ),

     expected =
     report(('1', 'code', 'warning', 'control character in line'),
            ('2', 'code', 'warning', 'private character in line'),
            ('3', 'code', 'warning', 'control character in line'),
            ('4', 'code', 'warning', 'private character in line')),
     command = VERBOSE_COMMAND)

test(document =
     ( b'<text>\n'
       b'<sentence with="(\xc2\x85)">\n' # U+0085 NEXT LINE in UTF-8
       b'(\xc2\x85)\n'
       b'</sentence>\n'
       b'</text>\n' ),

     expected =
     report(('2', 'code', 'error', 'line terminator in line'),
            ('2', 'code', 'warning', 'control character in line'),
            ('3', 'code', 'error', 'line terminator in line'),
            ('3', 'code', 'warning', 'control character in line')),
     command = VERBOSE_COMMAND)

test(document =
     ( b'<text>\n'
       b'<sentence>\n'
       b'i\t\n'
       b'\ti\n'
       b'</sentence>\n'
       b'</text>\n' ),

     expected =
     report(('3', 'data', 'warning', 'empty value: field 2'),
            ('4', 'data', 'warning', 'empty value: field 1')),
     command = VERBOSE_COMMAND)

test(document =
     ( b'<text one=" what" two="what ">\n'
       b'<sentence one="say  what">\n'
       b'x\n'
       b'</sentence>\n'
       b'</text>\n' ),

     expected =
     # surely these should be meta, not data
     report(('1', 'data', 'warning', 'outer space in value: one of text'),
            ('1', 'data', 'warning', 'outer space in value: two of text'),
            ('2', 'data', 'warning', 'double space in value: one of sentence')))

test(document =
     ( b'<text>\n'
       b'<sentence>\n'
       b' x\tx  x\tx \t \n'
       b'</sentence>\n'
       b'</text>\n' ),

     expected =
     report(('3', 'data', 'warning', 'outer space in value: field 1'),
            ('3', 'data', 'warning', 'double space in value: field 2'),
            ('3', 'data', 'warning', 'outer space in value: field 3'),
            ('3', 'data', 'warning', 'value is all space: field 4')))

test(tag = 'suspect-dates',

     document =
     ( b'<text datefrom="31.5." timefrom="4 pm." year="100">\n'
       b'</text>\n' ),

     expected =
     report(('1', 'meta', 'error',
             'date neither YYYYMMDD nor empty: datefrom of text'),
            ('1', 'meta', 'error',
             'time neither HHMMSS nor empty: timefrom of text'),
            ('1', 'meta', 'warning',
             'year neither YYYY nor empty: year of text')))

test(tag = 'empty-dates',

     document =
     ( b'<text datefrom="" timefrom="" year="">\n'
       b'</text>\n' ),

     # No error or warning from empty dates
     expected =
     report())

test(document =
     b'<text>\n',

     expected =
     report(('2', 'nest', 'error', 'element not closed: text')))

test(document =
     ( b'</text>\n'
       b'</text>\n' ),

     expected =
     report(('1', 'nest', 'error', 'element not open: text'),
            ('2', 'nest', 'error', 'element not open: text')),
     command = VERBOSE_COMMAND)

test(document =
     ( b'<text>\n'
       b'<text>\n'
       b'</text>\n' ),

     expected =
     report(('2', 'nest', 'error', 'element already open: text')))

test(document =
     ( b'\n'
       b'<text>\n'
       b'\n'
       b'<tail>\n'
       b'\n'
       b'</text>\n'
       b'\n'
       b'</tail>\n' ),

     expected =
     report(('1', 'form', 'warning', 'empty line outside elements'),
            ('3', 'form', 'warning', 'empty line in element: text'),
            ('5', 'form', 'warning', 'empty line in element: tail'),
            ('5', 'form', 'warning', 'empty line in element: text'),
            ('7', 'form', 'warning', 'empty line in element: tail')),
     command = VERBOSE_COMMAND)

test(document =
     ( b'<text>\n'
       b' \n'
       b'</text>\n' ),

     expected =
     report(('2', 'form', 'error', 'non-empty space line')))

test(document =
     ( b'<!--\n'
       b'<text>\n'
       b'<!-- ho hum >\n'
       b'<!-- --> \n'
       b'</text>\n' ),

     expected =
     report(('1', 'form', 'error', 'malformed comment'),
            ('3', 'form', 'error', 'malformed comment'),
            ('4', 'form', 'warning', 'comment has trailing space')),
     command = VERBOSE_COMMAND)

test(document =
     ( b'<text>\n'
       b'<!-- ... -->\n'
       b'<sentence>\n'
       b'<!-- ... -->\n'
       b'x\n'
       b'</sentence>\n'
       b'</text>\n' ),

     expected =
     report(('4', 'form', 'warning', 'comment in sentence')))

test(tag = 'good-field-comment',

     document =
     ( b'<text>\n'
       b'<!-- Positional attributes: foo bar -->\n'
       b'<sentence>\n'
       b'-\t-\n'
       b'</sentence>\n'
       b'</text>\n' ),

     expected =
     report(('1', 'name', 'info', 'opened element: text'),
            ('2', 'form', 'info', 'comment'),
            ('2', 'name', 'info', 'field names: foo bar'),
            ('2', 'data', 'info', 'number of fields: 2'),
            ('3', 'name', 'info', 'opened element: sentence')),
     command = INFO_COMMAND)

test(tag = 'good-field-comment-newformat',

     document =
     ( b'<text>\n'
       # Test different kinds of valid (extended) attribute names
       b'<!-- #vrt positional-attributes: foo bar/ a-b _ab a1 a.1 -->\n'
       b'<sentence>\n'
       b'-\t|\t-\t-\t-\t-\n'
       b'</sentence>\n'
       b'</text>\n' ),

     expected =
     report(('1', 'name', 'info', 'opened element: text'),
            ('2', 'form', 'info', 'comment'),
            ('2', 'name', 'info', 'field names: foo bar/ a-b _ab a1 a.1'),
            ('2', 'data', 'info', 'number of fields: 6'),
            ('3', 'name', 'info', 'opened element: sentence')),
     command = INFO_COMMAND)

test(tag = 'bad-field-comment',

     document =
     ( b'<!-- Positional attributes: -->\n'
       b'<!-- Positional attributes: 31 -->\n'
       b'<!-- Positional attributes: o o -->\n'
       b'<text>\n'
       b'</text>\n' ),

     expected =
     report(('1', 'form', 'error', 'empty field name comment'),
            ('2', 'form', 'error', 'bad field name'),
            ('3', 'form', 'error', 'duplicate field name: o')))

test(tag = 'bad-field-comment-newformat',

     document =
     ( b'<!-- #vrt positional-attributes: -->\n'
       b'<!-- #vrt positional-attributes: 31 -->\n'
       b'<!-- #vrt positional-attributes: o o -->\n'
       b'<!-- #vrt positional-attributes : o -->\n'
       b'<text>\n'
       b'</text>\n' ),

     expected =
     report(('1', 'form', 'error', 'empty field name comment'),
            ('2', 'form', 'error', 'bad field name'),
            ('3', 'form', 'error', 'duplicate field name: o'),
            ('4', 'form', 'error', 'malformed field name comment')))

test(tag = 'names-match-record',

     document =
     ( b'<!-- Positional attributes: foo bar -->\n'
       b'<text>\n'
       b'<sentence>\n'
       b'-\t-\n'
       b'</sentence>\n'
       b'</text>\n' ),

     expected =
     report(('1', 'form', 'info', 'comment'),
            ('1', 'name', 'info', 'field names: foo bar'),
            ('1', 'data', 'info', 'number of fields: 2'),
            ('2', 'name', 'info', 'opened element: text'),
            ('3', 'name', 'info', 'opened element: sentence')),
     command = INFO_COMMAND)

test(tag = 'late-names',

     document =
     ( b'<text>\n'
       b'<sentence>\n'
       b'-\n'
       b'</sentence>\n'
       b'<!-- Positional attributes: foo -->\n'
       b'</text>\n' ),

     expected =
     report(('5', 'name', 'warning', 'late field names: foo')))

test(tag = 'names-mismatch-record',

     document =
     ( b'<text>\n'
       b'<sentence>\n'
       b'-\n'
       b'</sentence>\n'
       b'<!-- Positional attributes: foo bar -->\n'
       b'</text>\n' ),

     expected =
     report(('5', 'name', 'error', 'original number of fields: 1'),
            ('5', 'name', 'error', 'different number of names: 2')))

test(tag = 'too-long-line',

     document =
     ( b'<text>\n'
       b'<sentence>\n'
       + (b'x' * 65533) + b'\n'
       + (b'x' * 65534) + b'\n' +
       b'</sentence>\n'
       b'</text>\n' ),

     expected =
     report(('3', 'length', 'warning', 'value over 4095 bytes long: field 1'),
            ('4', 'length', 'error', 'line over 65534 bytes long')))

test(tag = 'too-long-value',

     document =
     ( b'<text a="' + (b'x' * 4095) + b'" b="' + (b'x' * 4096) + b'">\n'
       b'<sentence>\n'
       + (b'x' * 4095) + b'\n'
       + (b'x' * 4096) + b'\n' +
       b'</sentence>\n'
       b'</text>\n' ),

     expected =
     report(('1', 'length', 'warning', 'value over 4095 bytes long: b of text'),
            ('4', 'length', 'warning', 'value over 4095 bytes long: field 1')))

print('passed: {}'.format(passed),
      'failed: {}'.format(failed),
      sep = '\n')

failed or print('', 'all tests pass', sep = '\n')
